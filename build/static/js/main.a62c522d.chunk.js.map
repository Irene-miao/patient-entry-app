{"version":3,"sources":["types.ts","constants.ts","state/reducer.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","components/HealthCheck.tsx","components/Hospital.tsx","components/OccupationalEntry.tsx","AddEntryModal/AddEntryForm.tsx","AddEntryModal/index.tsx","components/PatientDetails.tsx","App.tsx","index.tsx"],"names":["Gender","HealthCheckRating","apiBaseUrl","addPatient","newPatient","type","payload","addEntry","newEntry","console","log","removePatient","id","initialState","patients","diagnoses","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","TypeSelectField","TextField","field","placeholder","style","color","NumberField","min","max","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","requiredError","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","React","useState","setModalOpen","setError","closeModal","undefined","submitNewPatient","a","axios","post","data","response","deletePatient","delete","removedPatient","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","patient","Cell","to","HealthCheck","props","health","Card","fluid","padding","margin","date","Icon","fitted","size","specialist","description","healthCheckRating","Hospital","hospital","discharge","join","OccupationalEntry","occupational","employerName","sickLeave","startDate","endDate","typeOptions","isDate","length","Boolean","Date","parse","AddEntryForm","today","toISOString","split","criteria","dateError","includes","marginBottom","AddEntryModal","PatientDetails","useParams","submitNewEntry","editPatient","entries","concat","EntryDetails","entry","Error","JSON","stringify","assertNever","App","useEffect","fetchPatientList","get","patientListFromApi","diagnosisList","Link","primary","Divider","hidden","path","element","ReactDOM","render","action","reduce","memo","diagnosis","code","document","getElementById"],"mappings":"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","file":"static/js/main.a62c522d.chunk.js","sourcesContent":["export interface Diagnosis {\r\n  code: string;\r\n  name: string;\r\n  latin?: string;\r\n}\r\n\r\nexport enum Gender {\r\n  Male = \"male\",\r\n  Female = \"female\",\r\n  Other = \"other\"\r\n}\r\n\r\n export interface BaseEntry {\r\n  id: string;\r\n  description: string;\r\n  date: string;\r\n  specialist: string;\r\n  diagnosisCodes?: Array<Diagnosis['code']>;\r\n}\r\n\r\n\r\n export enum HealthCheckRating {\r\n  \"Healthy\" = 0,\r\n  \"LowRisk\" = 1,\r\n  \"HighRisk\" = 2,\r\n  \"CriticalRisk\" = 3\r\n}\r\n\r\n\r\nexport interface HealthCheckEntry extends BaseEntry {\r\n  type: \"HealthCheck\";\r\n  healthCheckRating: HealthCheckRating;\r\n}\r\n\r\nexport interface Discharge {\r\n  date: string;\r\n  criteria: string;\r\n}\r\n\r\n export interface HospitalEntry extends BaseEntry {\r\n  type: \"Hospital\";\r\n  discharge: Discharge;\r\n}\r\n\r\n export interface SickLeave {\r\n  startDate: string;\r\n  endDate: string;\r\n}\r\n\r\nexport interface OccupationalHealthcareEntry extends BaseEntry {\r\n  type: \"OccupationalHealthcare\";\r\n  employerName: string;\r\n  sickLeave?: SickLeave;\r\n}\r\n\r\nexport type Entry = \r\n| HospitalEntry\r\n| OccupationalHealthcareEntry\r\n| HealthCheckEntry;\r\n\r\ninterface AllFormValues extends BaseEntry {\r\ntype: string;\r\ndischarge?: Discharge;\r\nsickLeave?: SickLeave;\r\nemployerName?: string;\r\nhealthCheckRating?: HealthCheckRating;\r\n}\r\n\r\nexport type EntryFormValues =Omit<AllFormValues, 'id'>;\r\n\r\nexport interface TypeOption {\r\n  value: string,\r\n  label: string\r\n}\r\n\r\nexport interface Patient {\r\n  id: string;\r\n  name: string;\r\n  occupation: string;\r\n  gender: Gender;\r\n  ssn?: string;\r\n  dateOfBirth?: string;\r\n  entries: Entry[];\r\n}\r\n\r\n","export const apiBaseUrl = '/api/patients';\r\nexport const apiBaseUrlTwo = '/api/diagnoses';\r\n\r\n","/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n/* eslint-disable @typescript-eslint/no-unsafe-call */\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\nimport { State } from \"./state\";\r\nimport { Diagnosis,  Patient} from \"../types\";\r\n\r\n\r\nexport type Action =\r\n  | {\r\n      type: \"SET_PATIENT_LIST\";\r\n      payload: Patient[];\r\n    }\r\n  | {\r\n      type: \"ADD_PATIENT\";\r\n      payload: Patient;\r\n    }\r\n  | {\r\n      type: \"REMOVE_PATIENT\";\r\n      payload: string;\r\n    }\r\n  | {\r\n    type: \"ADD_ENTRY\";\r\n    payload: Patient;\r\n  }\r\n  | {\r\n      type: \"SET_DIAGNOSIS_LIST\";\r\n      payload: Diagnosis[];\r\n  };\r\n\r\nexport const reducer = (state: State, action: Action): State => {\r\n  console.log(\"State: \", state);\r\n  console.log(\"Action: \", action);\r\n\r\n    switch (action.type) {\r\n    case \"SET_PATIENT_LIST\":\r\n      return {\r\n        ...state,\r\n        patients: {\r\n          ...action.payload.reduce(\r\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\r\n            {}\r\n          ),\r\n          ...state.patients\r\n        } \r\n      };\r\n    case \"ADD_PATIENT\":\r\n      return {\r\n        ...state,\r\n        patients: {\r\n          ...state.patients,\r\n          [action.payload.id]: action.payload\r\n        }\r\n      };\r\n      case \"REMOVE_PATIENT\":\r\n        delete state.patients[action.payload];\r\n      return {\r\n        ...state,\r\n        patients: state.patients\r\n      };\r\n      case \"ADD_ENTRY\":\r\n        \r\n        return {\r\n          ...state, \r\n          patients: {\r\n            ...state.patients,\r\n            [action.payload.id]: state.patients[action.payload.id] = action.payload\r\n          }\r\n        };\r\n      case \"SET_DIAGNOSIS_LIST\":\r\n        return {\r\n          ...state,\r\n          diagnoses: {\r\n            ...action.payload.reduce(\r\n              (memo, diagnosis) => ({ ...memo, [diagnosis.code]: diagnosis }),\r\n              {}\r\n            ),\r\n            ...state.diagnoses\r\n          } \r\n        };\r\n    default:\r\n      return state;\r\n  }\r\n  \r\n};\r\n\r\n\r\n\r\nexport const setPatientList = (patients: Patient[]): Action => {\r\n  return {\r\n      type: 'SET_PATIENT_LIST',\r\n      payload: patients, \r\n    };\r\n  };\r\n\r\n  export const addPatient = (newPatient: Patient): Action => {\r\n    return {\r\n       type: \"ADD_PATIENT\", \r\n      payload: newPatient,\r\n    };\r\n  };\r\n\r\n\r\n  export const addEntry = (newEntry: Patient):Action => {\r\n    console.log(newEntry);\r\n    return {\r\n      type: \"ADD_ENTRY\",\r\n      payload: newEntry,\r\n    };\r\n  };\r\n\r\n  export const removePatient = (id: string): Action => {\r\n    console.log(id);\r\n    return {\r\n      type: \"REMOVE_PATIENT\",\r\n      payload: id,\r\n    };\r\n  };\r\n\r\n  export const setDiagnosisList = (diagnoses: Diagnosis[]): Action => {\r\n    return {\r\n        type: 'SET_DIAGNOSIS_LIST',\r\n        payload: diagnoses, \r\n      };\r\n    };","import React, { createContext, useContext, useReducer } from \"react\";\r\nimport { Patient, Diagnosis } from \"../types\";\r\n\r\nimport { Action } from \"./reducer\";\r\n\r\nexport type State = {\r\n  patients: { [id: string]: Patient };\r\n  diagnoses: { [code: string]: Diagnosis}\r\n};\r\n\r\nconst initialState: State = {\r\n  patients: {},\r\n  diagnoses: {},\r\n};\r\n\r\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\r\n  initialState,\r\n  () => initialState\r\n]);\r\n\r\ntype StateProviderProps = {\r\n  reducer: React.Reducer<State, Action>;\r\n  children: React.ReactElement;\r\n};\r\n\r\nexport const StateProvider: React.FC<StateProviderProps> = ({\r\n  reducer,\r\n  children\r\n}: StateProviderProps) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  return (\r\n    <StateContext.Provider value={[state, dispatch]}>\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React from \"react\";\r\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\r\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\r\nimport { Diagnosis, Gender, TypeOption } from \"../types\";\r\n\r\n// structure of a single option\r\nexport type GenderOption = {\r\n  value: Gender;\r\n  label: string;\r\n};\r\n\r\n// props for select field component\r\ntype SelectFieldProps = {\r\n  name: string;\r\n  label: string;\r\n  options: GenderOption[];\r\n};\r\n\r\nexport const SelectField = ({\r\n  name,\r\n  label,\r\n  options\r\n}: SelectFieldProps) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\r\n      {options.map(option => (\r\n        <option key={option.value} value={option.value}>\r\n          {option.label || option.value}\r\n        </option>\r\n      ))}\r\n    </Field>\r\n  </Form.Field>\r\n);\r\n\r\ntype TypeSelectFieldProps = {\r\n  name: string;\r\n  label: string;\r\n  options: TypeOption[];\r\n};\r\n\r\nexport const TypeSelectField = ({\r\n  name, \r\n  label,\r\n  options\r\n}: TypeSelectFieldProps) => (\r\n  <Form.Field>\r\n    <label>\r\n      {label}\r\n    </label>\r\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\r\n      {options.map(option => (\r\n        <option key={option.value} value={option.value}>\r\n          {option.label || option.value}\r\n          </option>\r\n      ))}\r\n    </Field>\r\n  </Form.Field>\r\n);\r\n\r\n\r\ninterface TextProps extends FieldProps {\r\n  label: string;\r\n  placeholder: string;\r\n}\r\n\r\n\r\n\r\nexport const TextField= ({\r\n  field,\r\n  label,\r\n  placeholder\r\n}: TextProps) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field placeholder={placeholder} {...field} />\r\n    <div style={{ color:'red' }}>\r\n      <ErrorMessage name={field.name} />\r\n    </div>\r\n  </Form.Field>\r\n);\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n  for exercises 9.24.-\r\n*/\r\ninterface NumberProps extends FieldProps {\r\n  label: string;\r\n  errorMessage?: string;\r\n  min: number;\r\n  max: number;\r\n  placeholder: string;\r\n \r\n}\r\n\r\nexport const NumberField = ({ field, label, min, max, placeholder } : NumberProps ) => (\r\n  <Form.Field>\r\n    <label>{label}</label>\r\n    <Field {...field} type='number' min={min} max={max} placeholder={placeholder} />\r\n\r\n    <div style={{ color:'red' }}>\r\n      <ErrorMessage name={field.name} />\r\n    </div>\r\n  </Form.Field>\r\n);\r\n\r\nexport const DiagnosisSelection = ({\r\n  diagnoses,\r\n  setFieldValue,\r\n  setFieldTouched\r\n}: {\r\n  diagnoses: Diagnosis[];\r\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\r\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\r\n}) => {\r\n  const field = \"diagnosisCodes\";\r\n  const onChange = (\r\n    _event: React.SyntheticEvent<HTMLElement, Event>,\r\n    data: DropdownProps\r\n  ) => {\r\n    setFieldTouched(field, true);\r\n    setFieldValue(field, data.value);\r\n  };\r\n\r\n  const stateOptions = diagnoses.map(diagnosis => ({\r\n    key: diagnosis.code,\r\n    text: `${diagnosis.name} (${diagnosis.code})`,\r\n    value: diagnosis.code\r\n  }));\r\n\r\n  return (\r\n    <Form.Field>\r\n      <label>Diagnoses</label>\r\n      <Dropdown\r\n        fluid\r\n        multiple\r\n        search\r\n        selection\r\n        options={stateOptions}\r\n        onChange={onChange}\r\n      />\r\n      <ErrorMessage name={field} />\r\n    </Form.Field>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\n\r\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\r\nimport { Gender, Patient } from \"../types\";\r\n\r\n/*\r\n * use type Patient, but omit id and entries,\r\n * because those are irrelevant for new patient object.\r\n */\r\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\r\n\r\ninterface Props {\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst genderOptions: GenderOption[] = [\r\n  { value: Gender.Male, label: \"Male\" },\r\n  { value: Gender.Female, label: \"Female\" },\r\n  { value: Gender.Other, label: \"Other\" }\r\n];\r\n\r\nexport const AddPatientForm = ({ onSubmit, onCancel } : Props ) => {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        ssn: \"123456-123A\",\r\n        dateOfBirth: \"\",\r\n        occupation: \"\",\r\n        gender: Gender.Other\r\n      }}\r\n      onSubmit={onSubmit}\r\n      validate={values => {\r\n        const requiredError = \"Field is required\";\r\n        const errors: { [field: string]: string } = {};\r\n        if (!values.name) {\r\n          errors.name = requiredError;\r\n        }\r\n        if (!values.ssn) {\r\n          errors.ssn = requiredError;\r\n        }\r\n        if (!values.dateOfBirth) {\r\n          errors.dateOfBirth = requiredError;\r\n        }\r\n        if (!values.occupation) {\r\n          errors.occupation = requiredError;\r\n        }\r\n        return errors;\r\n      }}\r\n    >\r\n      {({ isValid, dirty }) => {\r\n        return (\r\n          <Form className=\"form ui\">\r\n            <Field\r\n              label=\"Name\"\r\n              placeholder=\"Name\"\r\n              name=\"name\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Social Security Number\"\r\n              placeholder=\"SSN\"\r\n              name=\"ssn\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Date Of Birth\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"dateOfBirth\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Occupation\"\r\n              placeholder=\"Occupation\"\r\n              name=\"occupation\"\r\n              component={TextField}\r\n            />\r\n            <SelectField\r\n              label=\"Gender\"\r\n              name=\"gender\"\r\n              options={genderOptions}\r\n            />\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddPatientForm;\r\n","import React from 'react';\r\nimport { Modal, Segment } from 'semantic-ui-react';\r\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\r\n\r\ninterface Props {\r\n  modalOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (values: PatientFormValues) => void;\r\n  error?: string;\r\n}\r\n\r\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\r\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\r\n    <Modal.Header>Add a new patient</Modal.Header>\r\n    <Modal.Content>\r\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\r\n    </Modal.Content>\r\n  </Modal>\r\n);\r\n\r\nexport default AddPatientModal;\r\n","import React from 'react';\r\nimport { Rating } from 'semantic-ui-react';\r\n\r\ntype BarProps = {\r\n  rating: number;\r\n  showText: boolean;\r\n};\r\n\r\nconst HEALTHBAR_TEXTS = [\r\n  'The patient is in great shape',\r\n  'The patient has a low risk of getting sick',\r\n  'The patient has a high risk of getting sick',\r\n  'The patient has a diagnosed condition',\r\n];\r\n\r\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\r\n  return (\r\n    <div className=\"health-bar\">\r\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\r\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthRatingBar;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Container, Table, Button } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\r\nimport AddPatientModal from \"../AddPatientModal\";\r\nimport { Patient } from \"../types\";\r\nimport { apiBaseUrl } from \"../constants\";\r\nimport HealthRatingBar from \"../components/HealthRatingBar\";\r\nimport { useStateValue, addPatient, removePatient } from \"../state\";\r\n\r\nconst PatientListPage = () => {\r\n  const [{ patients }, dispatch] = useStateValue();\r\n\r\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\r\n  const [error, setError] = React.useState<string | undefined>();\r\n\r\n  const openModal = (): void => setModalOpen(true);\r\n\r\n  const closeModal = (): void => {\r\n    setModalOpen(false);\r\n    setError(undefined);\r\n  };\r\n\r\n  const submitNewPatient = async (values: PatientFormValues) => {\r\n    try {\r\n      const { data: newPatient } = await axios.post<Patient>(\r\n        `${apiBaseUrl}`,\r\n        values\r\n      );\r\n      dispatch(addPatient(newPatient));\r\n      closeModal();\r\n    } catch (e) {\r\n      console.error(e.response?.data || 'Unknown Error');\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n      setError(e.response?.data?.error || 'Unknown error');\r\n    }\r\n  };\r\n  \r\n  const deletePatient = async (id: string) => {\r\n    try {\r\n      const { data: removedPatient } = await axios.delete<Patient>(\r\n        `${apiBaseUrl}/${id}`\r\n        \r\n      );\r\n      console.log(removedPatient);\r\n      dispatch(removePatient(id));\r\n    } catch (e) {\r\n      console.error(e.response?.data || 'Unknown Error');\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n      setError(e.response?.data?.error || 'Unknown error');\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Container textAlign=\"center\">\r\n        <h3>Patient list</h3>\r\n      </Container>\r\n      <Table celled>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>Name</Table.HeaderCell>\r\n            <Table.HeaderCell>Gender</Table.HeaderCell>\r\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\r\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {Object.values(patients).map((patient: Patient) => (\r\n            <Table.Row key={patient.id}>\r\n              <Table.Cell><Link to={`/${patient.id}`}>{patient.name}</Link></Table.Cell>\r\n              <Table.Cell>{patient.gender}</Table.Cell>\r\n              <Table.Cell>{patient.occupation}</Table.Cell>\r\n              <Table.Cell>\r\n                <HealthRatingBar showText={false} rating={1} />\r\n              </Table.Cell>\r\n              <Table.Cell><Button onClick={() => deletePatient(patient.id)}>Delete Patient</Button></Table.Cell>\r\n            </Table.Row>\r\n          ))}\r\n        </Table.Body>\r\n      </Table>\r\n      <AddPatientModal\r\n        modalOpen={modalOpen}\r\n        onSubmit={submitNewPatient}\r\n        error={error}\r\n        onClose={closeModal}\r\n      />\r\n      <Button onClick={() => openModal()}>Add New Patient</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientListPage;\r\n","import React from 'react';\r\nimport { HealthCheckEntry } from \"../types\";\r\nimport { Icon, Card } from \"semantic-ui-react\";\r\n\r\n\r\ninterface HealthDetail {\r\n    health: HealthCheckEntry;\r\n}\r\n\r\n\r\nconst HealthCheck = (props: HealthDetail) => {\r\n   console.log(props.health);\r\n    if (!props.health) {\r\n        return null;\r\n    }\r\n    \r\n    return (\r\n             <div>\r\n                <Card fluid centered style={{padding: 10, margin: 10}}>\r\n                <p>{props.health.date} <Icon fitted name='doctor' size='huge' />{props.health.specialist}</p>\r\n                    <p>{props.health.description}</p>\r\n                    <p>{props.health.healthCheckRating < 2 ? <Icon color='red' fitted name='heart'/> : <Icon color='yellow' fitted name='heart' />}</p>\r\n                </Card>\r\n        </div>\r\n     \r\n    );\r\n};\r\n\r\nexport default HealthCheck;\r\n","import * as React from 'react';\r\nimport {  HospitalEntry } from '../types';\r\nimport { Icon, Card } from 'semantic-ui-react';\r\n\r\n\r\ninterface HospitalDetail {\r\n    hospital: HospitalEntry\r\n}\r\n\r\nconst Hospital = (props : HospitalDetail) => {\r\nconsole.log(props.hospital);\r\n if (!props.hospital) {\r\n     return null;\r\n }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Card fluid centered style={{padding: 10, margin:10}}>\r\n            <p>{props.hospital.date} <Icon fitted name='doctor' size='huge' />{props.hospital.specialist}</p>\r\n            <p>{props.hospital.description}</p>\r\n            <p>{Object.values(props.hospital.discharge).join('  discharged:   ')}</p>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Hospital;\r\n","import React from 'react';\r\nimport { OccupationalHealthcareEntry } from '../types';\r\nimport { Icon, Card } from 'semantic-ui-react';\r\n\r\n\r\ninterface OccupationalDetail {\r\n    occupational: OccupationalHealthcareEntry\r\n}\r\n\r\nconst OccupationalEntry = (props: OccupationalDetail) => {\r\n    console.log(props.occupational);\r\n    if (!props.occupational) {\r\n        return null;\r\n    }\r\n    \r\n    return (\r\n        <div >\r\n            <Card fluid centered style={{padding: 10, margin: 10}}>\r\n            <p>{props.occupational.date} <Icon fitted name='stethoscope' size='huge' /> {props.occupational.specialist}</p>\r\n            <p>{props.occupational.description}</p>\r\n            <p>{props.occupational.employerName}</p>\r\n            {props.occupational.sickLeave ? <p>Start: {props.occupational.sickLeave.startDate}<br />End: {props.occupational.sickLeave.endDate}</p> : null}\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OccupationalEntry;\r\n","import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField, NumberField, TypeSelectField } from \"../AddPatientModal/FormField\";\r\nimport { EntryFormValues, TypeOption } from \"../types\";\r\n\r\n\r\ninterface Props {\r\n  onSubmit: (values: EntryFormValues) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst typeOptions: TypeOption[] = [\r\n  {value: \"HealthCheck\", label: \"HealthCheck\"},\r\n  {value: \"Hospital\", label: \"Hospital\"},\r\n  {value: \"OccupationalHealthcare\", label: \"OccupationalHealthcare\"}\r\n];\r\n\r\nconst isDate = (date: string): boolean => {\r\n  if (date.length===0) {\r\n    return true;\r\n  }\r\n  return Boolean(Date.parse(date));\r\n};\r\n\r\nexport const AddEntryForm = ({ onSubmit, onCancel } : Props ) => {\r\n const today = new Date().toISOString().split('T')[0];\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\r\n        date: `${today}`,\r\n        specialist: \"\",\r\n        description: \"\",\r\n        type: \"\",\r\n        healthCheckRating: 0,\r\n        discharge: {\r\n          date: \"\",\r\n          criteria: \"\"\r\n        },\r\n        sickLeave: {\r\n          startDate: \"\",\r\n          endDate: \"\"\r\n        },\r\n        employerName: \"\"\r\n      }}\r\n      onSubmit={onSubmit}\r\n      validate={values => {\r\n        const requiredError = \"Field is required\";\r\n        const dateError = \"Malformatted date\";\r\n        const errors: { [field: string]: string } = {};\r\n        if (!values.date) {\r\n          errors.date = requiredError;\r\n        }\r\n        if (values.date && !isDate(values.date)) {\r\n          errors.date = dateError;\r\n        }\r\n        if (!values.specialist || values.specialist.length === 0) {\r\n          errors.specialist = requiredError;\r\n        }\r\n        if (!values.description || values.description.length === 0) {\r\n          errors.description = requiredError;\r\n        }\r\n        if (values.type === \"HealthCheck\") {\r\n          const healthCheckRating = values.healthCheckRating;\r\n          if (!healthCheckRating) {\r\n          errors.healthCheckRating = requiredError;\r\n        }\r\n        if (![0,1,2,3].includes(healthCheckRating as number)) {\r\n          errors.healthCheckRating = \"value must be 0-3\";\r\n        }\r\n        }\r\n        if (values.type === \"Hospital\") {\r\n          const discharge = values.discharge;\r\n          if (discharge && !isDate(discharge.date)) {\r\n          errors.discharge = dateError;\r\n        }\r\n        }\r\n        if (values.type === \"OccupationalHealthcare\") {\r\n          const sickLeave = values.sickLeave;\r\n          if (sickLeave && (!isDate(sickLeave.startDate) || !isDate(sickLeave.endDate))) {\r\n          errors.sickLeave = dateError;\r\n        }\r\n        }\r\n        return errors;\r\n      }}\r\n    >\r\n      {({ isValid, dirty, values, errors }) => {\r\n        return (\r\n          <Form className=\"form ui\">\r\n            <TypeSelectField\r\n              label=\"Type\"\r\n              name=\"type\"\r\n              options={typeOptions}\r\n            />\r\n             <Field\r\n              label=\"Date\"\r\n              placeholder=\"Date\"\r\n              name=\"date\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Specialist\"\r\n              placeholder=\"Specialist\"\r\n              name=\"specialist\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Description\"\r\n              placeholder=\"Description\"\r\n              name=\"description\"\r\n              component={TextField}\r\n            />\r\n            {values.type === \"HealthCheck\" && \r\n            <>\r\n            <Field\r\n              label=\"Rating\"\r\n              placeholder=\"0\"\r\n              name=\"healthCheckRating\"\r\n              component={NumberField}\r\n              min={0}\r\n              max={3}\r\n            />\r\n            </>\r\n            }\r\n            {values.type === \"Hospital\" &&\r\n            <>\r\n            <Field\r\n            label=\"Discharge Date\"\r\n            placeholder=\"Discharge Date\"\r\n            name=\"discharge.date\"\r\n            component={TextField}\r\n          />\r\n          <div style={{color: \"red\", marginBottom: 5}}>{errors.discharge}</div>\r\n          <Field\r\n              label=\"Discharge Criteria\"\r\n              placeholder=\"Discharge Criteria\"\r\n              name=\"discharge.criteria\"\r\n              component={TextField}\r\n            />\r\n          </>\r\n            }\r\n            {values.type === \"OccupationalHealthcare\" &&\r\n            <>\r\n             <Field\r\n              label=\"Employer Name\"\r\n              placeholder=\"Employer Name\"\r\n              name=\"employerName\"\r\n              component={TextField}\r\n            />\r\n             <div style={{color: \"red\", marginBottom: 5}}>{errors.sickLeave}</div>\r\n             <Field\r\n              label=\"Sick leave start date\"\r\n              placeholder=\"Sick leave start date\"\r\n              name=\"sickLeave.startDate\"\r\n              component={TextField}\r\n            />\r\n              <Field\r\n              label=\"Sick leave end date\"\r\n              placeholder=\"Sick leave end date\"\r\n              name=\"sickLeave.endDate\"\r\n              component={TextField}\r\n            />\r\n            </>\r\n            }\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddEntryForm;\r\n","\r\nimport React from 'react';\r\nimport { Modal, Segment } from 'semantic-ui-react';\r\nimport AddEntryForm from './AddEntryForm';\r\nimport  { EntryFormValues } from '../types';\r\n\r\n\r\ninterface Props {\r\n  modalOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (values: EntryFormValues) => void;\r\n  error?: string;\r\n}\r\n\r\nconst AddEntryModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\r\n  \r\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\r\n    <Modal.Header>Add a new entry</Modal.Header>\r\n    <Modal.Content>\r\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\r\n     <AddEntryForm onSubmit={onSubmit} onCancel={onClose}/> \r\n    </Modal.Content>\r\n  </Modal>\r\n\r\n);\r\n\r\nexport default AddEntryModal;\r\n\r\n\r\n","import React from 'react';\r\nimport { useStateValue, addEntry } from \"../state\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Patient, Entry } from \"../types\";\r\nimport { Icon, Button} from \"semantic-ui-react\";\r\nimport HealthCheck from './HealthCheck';\r\nimport Hospital from './Hospital';\r\nimport OccupationalEntry from './OccupationalEntry';\r\nimport axios from \"axios\";\r\nimport {EntryFormValues} from \"../types\";\r\n\r\nimport AddEntryModal from \"../AddEntryModal\";\r\n\r\nimport { apiBaseUrl } from \"../constants\";\r\n\r\n\r\n\r\nconst PatientDetails = () => {\r\n    const [{ patients, diagnoses}, dispatch] = useStateValue();\r\n\r\n    const {id} = useParams();\r\n    \r\n    console.log(patients);\r\n    console.log(diagnoses);\r\n\r\n    const [modalOpen, setModalOpen] = React.useState<boolean>(false);\r\n    const [error, setError] = React.useState<string | undefined>();\r\n\r\n    const openModal = (): void => setModalOpen(true);\r\n\r\n    const closeModal = (): void => {\r\n    setModalOpen(false);\r\n    setError(undefined);\r\n  };\r\n\r\n  \r\n  const submitNewEntry = (values: EntryFormValues) => {\r\n    console.log(values);\r\n    Object.values(patients).map(async (patient: Patient) => {\r\n      if (patient.id === id) {\r\n        try {\r\n          const { data: newEntry } = await axios.post<Entry>(\r\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\r\n            `${apiBaseUrl}/${id}/entries`,\r\n            values\r\n          );\r\n          console.log(newEntry);\r\n          const editPatient = patient.entries.concat(newEntry);\r\n          console.log(editPatient);\r\n          dispatch(addEntry(patient));\r\n          closeModal();\r\n        } catch (e) {\r\n          console.error(e.response?.data || 'Unknown Error');\r\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n          setError(e.response?.data || 'Unknown Error');\r\n        }\r\n      }\r\n    }); \r\n  };\r\n\r\n    const assertNever = (value: never): never => {\r\n        throw new Error(`Unhandled discriminated union member: ${JSON.stringify(value)}`);\r\n    };\r\n\r\n    const EntryDetails: React.FC<{ entry: Entry }> = ({entry}) => {\r\n        console.log(entry);\r\n        \r\n        switch (entry.type) {\r\n            case \"Hospital\":\r\n                return <Hospital   hospital={entry}/>;\r\n            case \"OccupationalHealthcare\":\r\n                return <OccupationalEntry occupational={entry}/>;\r\n            case \"HealthCheck\":\r\n                return <HealthCheck  health={entry}/>;\r\n            default:\r\n                return assertNever(entry);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {Object.values(patients).map((patient: Patient) => (\r\n            patient.id === id ? \r\n           ( \r\n           <div key={patient.id}> \r\n                <h1>{patient.name}  {patient.gender === \"male\" ? <Icon fitted name='mars'/> : <Icon fitted name='venus' />}</h1>\r\n                <p>ssn: {patient.ssn}</p>\r\n                <p>occupation: {patient.occupation}</p>\r\n              \r\n                <h3>entries</h3>\r\n                <div>\r\n                <AddEntryModal\r\n        modalOpen={modalOpen}\r\n        onSubmit={submitNewEntry}\r\n        error={error}\r\n        onClose={closeModal}\r\n      />\r\n      <Button onClick={() => openModal()}>Add New Entry</Button>\r\n      </div>\r\n                <div>\r\n                {Object.values(patient.entries)?.map((entry: Entry) => { \r\n                    console.log(entry);\r\n                    return EntryDetails({entry}\r\n                    );})}\r\n                </div>\r\n        </div>\r\n            ) : null ))}\r\n        </div> \r\n    );\r\n           };\r\n\r\nexport default PatientDetails;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { BrowserRouter as Router, Route, Link, Routes } from \"react-router-dom\";\r\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\r\n\r\nimport { apiBaseUrl, apiBaseUrlTwo } from \"./constants\";\r\nimport { useStateValue, setPatientList, setDiagnosisList } from \"./state\";\r\n\r\nimport PatientListPage from \"./PatientListPage\";\r\nimport PatientDetails from \"./components/PatientDetails\";\r\nimport { Patient, Diagnosis } from \"./types\";\r\n\r\n\r\nconst App = () => {\r\n  const [, dispatch] = useStateValue();\r\n  React.useEffect(() => {\r\n    \r\n\r\n    const fetchPatientList = async () => {\r\n      try {\r\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\r\n          `${apiBaseUrl}`\r\n        );\r\n        dispatch(setPatientList(patientListFromApi));\r\n\r\n        const { data: diagnosisList } = await axios.get<Diagnosis[]>(\r\n          `${apiBaseUrlTwo}`\r\n        );\r\n        \r\n        dispatch(setDiagnosisList(diagnosisList));\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    void fetchPatientList();\r\n  }, [dispatch]);\r\n   \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Container>\r\n          <Header as=\"h1\">Patientor</Header>\r\n          <Button as={Link} to=\"/\" primary>\r\n            Home\r\n          </Button>\r\n          <Divider hidden />\r\n          <Routes>\r\n            <Route path=\"/\" element={<PatientListPage />}>\r\n            </Route>\r\n            <Route path=\"/:id\" element={<PatientDetails />}>\r\n            </Route>\r\n          </Routes>\r\n        </Container>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\nimport { reducer, StateProvider } from \"./state\";\r\n\r\nReactDOM.render(\r\n  <StateProvider reducer={reducer}>\r\n    <App />\r\n  </StateProvider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}